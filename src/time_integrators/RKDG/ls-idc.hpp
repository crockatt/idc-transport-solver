//------------------------------------------------------------------------------------------------------------
//! \file   time_integrators/RKDG/ls-idc.hpp
//! \brief  Header file for implementation of LS-IDC integrators using implicit Euler steps.
//!
//! \author Michael Crockattt
//! \date   February 2018
//------------------------------------------------------------------------------------------------------------

# ifndef __RKDG__LSIDC_INTEGRATOR_HPP__
# define __RKDG__LSIDC_INTEGRATOR_HPP__


# include "time_integrators/RKDG/idc.hpp"


//------------------------------------------------------------------------------------------------------------
//! \brief  Class for LS-IDC time integration schemes.
//!
//!
//! \attention  Inherits virtual destructor from IDCIntegrator class.
//!
//!
//------------------------------------------------------------------------------------------------------------
class LSIDCIntegrator : public IDCIntegrator {

public:

    //========================================================================================================
    //=== CONSTRUCTORS AND DESTRUCTOR ========================================================================
    //========================================================================================================


    //--------------------------------------------------------------------------------------------------------
    //! \brief  Delete default constructor.
    //--------------------------------------------------------------------------------------------------------
    LSIDCIntegrator( void ) = delete;


    //--------------------------------------------------------------------------------------------------------
    //! \brief  Delete copy constructor.
    //--------------------------------------------------------------------------------------------------------
    LSIDCIntegrator( const LSIDCIntegrator & ) = delete;


    //--------------------------------------------------------------------------------------------------------
    //! \brief  Creates an LSIDCIntegrator object using the specified parameters and returns a pointer to the
    //!         object.
    //--------------------------------------------------------------------------------------------------------
    static LSIDCIntegrator * Create( const ParameterList & );


    //========================================================================================================
    //=== OPERATOR OVERLOADS =================================================================================
    //========================================================================================================


    //--------------------------------------------------------------------------------------------------------
    //! \brief  Delete copy assignment operator.
    //--------------------------------------------------------------------------------------------------------
    LSIDCIntegrator & operator=( const LSIDCIntegrator & ) = delete;


    //========================================================================================================
    //=== INTERFACE ROUTINES =================================================================================
    //========================================================================================================


    //--------------------------------------------------------------------------------------------------------
    //! \brief  Returns the TimeIntegratorType of the object.
    //--------------------------------------------------------------------------------------------------------
    TimeIntegratorType GetIntegratorType( void ) const override {  return TimeIntegratorType::LSIDC;  }


protected:

    //========================================================================================================
    //=== PROTECTED CONSTRUCTOR ==============================================================================
    //========================================================================================================


    //--------------------------------------------------------------------------------------------------------
    //! \brief  Constructs an LSIDCIntegrator object using the provided values.
    //--------------------------------------------------------------------------------------------------------
    LSIDCIntegrator( const ParameterList & );


    //========================================================================================================
    //=== PROTECTED HELPER ROUTINES ==========================================================================
    //========================================================================================================


    //--------------------------------------------------------------------------------------------------------
    //! \brief  Allocates memory for the internal stage values.
    //--------------------------------------------------------------------------------------------------------
    void Allocate( void ) override;


    //--------------------------------------------------------------------------------------------------------
    //! \brief  Computes residuals for the non-hybrid operator.
    //--------------------------------------------------------------------------------------------------------
    void ComputeResiduals( void ) override;


    //--------------------------------------------------------------------------------------------------------
    //! \brief  Computes fictitious sources for non-hybrid corrections.
    //--------------------------------------------------------------------------------------------------------
    void ComputeSource( const RKDG::OrdinateFlux & source, const double dt, const int64_t n ) override;


    //--------------------------------------------------------------------------------------------------------
    //! \brief  Computes residuals for the hybrid-I operator.
    //--------------------------------------------------------------------------------------------------------
    void ComputeResiduals_HybridI( void ) override;


    //--------------------------------------------------------------------------------------------------------
    //! \brief  Computes fictitious sources for the uncollided portion of hybrid-I corrections.
    //--------------------------------------------------------------------------------------------------------
    void u_ComputeSource_HybridI( const RKDG::OrdinateFlux & source,
                                  const double dt, const int64_t n ) override;


    //--------------------------------------------------------------------------------------------------------
    //! \brief  Computes fictitious sources for the collided portion of hybrid-I corrections.
    //--------------------------------------------------------------------------------------------------------
    void c_ComputeSource_HybridI( const double dt, const int64_t n ) override;


    //--------------------------------------------------------------------------------------------------------
    //! \brief  Computes fictitious sources for the uncollided portion of hybrid-II corrections.
    //--------------------------------------------------------------------------------------------------------
    void u_ComputeSource_HybridII( const RKDG::OrdinateFlux & source,
                                   const double dt, const int64_t n ) override;


    //--------------------------------------------------------------------------------------------------------
    // \brief  Computes fictitious sources for the collided portion of hybrid-II corrections.
    //--------------------------------------------------------------------------------------------------------
//     void c_ComputeSource_HybridII( const double dt, const int64_t n ) override;


    //--------------------------------------------------------------------------------------------------------
    //! \brief  Computes source terms for the hybrid-IIc Nystr√∂m reconstruction.
    //--------------------------------------------------------------------------------------------------------
    void ComputeNystromSource( const RKDG::OrdinateFlux & source, const double dt, const int64_t n ) override;
};


# endif // ifndef __RKDG__LSIDC_INTEGRATOR_HPP__
