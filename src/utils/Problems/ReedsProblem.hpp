//------------------------------------------------------------------------------------------------------------
//! \file   utils/Problems/ReedsProblem.hpp
//! \brief  Header for ReedsProblem class.
//!
//! \author Michael M. Crockatt
//! \date   June 2018
//------------------------------------------------------------------------------------------------------------

# ifndef __REEDS_PROBLEM_HPP__
# define __REEDS_PROBLEM_HPP__

# if SPACE_DIMS == 1 || defined (DOXYCOMPILE)


# include <memory>

# include "utils/Mollifier.hpp"
# include "utils/Problems/Problem.hpp"


//------------------------------------------------------------------------------------------------------------
//! \brief  Reed's problem.
//!
//! \todo   Citation for Reed's problem.
//------------------------------------------------------------------------------------------------------------
class ReedsProblem :
    public Problem
{

public:

    //========================================================================================================
    //=== CONSTRUCTORS AND DESTRUCTOR ========================================================================
    //========================================================================================================

    //--------------------------------------------------------------------------------------------------------
    //! \brief  Delete default constructor.
    //--------------------------------------------------------------------------------------------------------
    ReedsProblem( void ) = delete;

    //--------------------------------------------------------------------------------------------------------
    //! \brief  Delete copy constructor.
    //--------------------------------------------------------------------------------------------------------
    ReedsProblem( const ReedsProblem & ) = delete;

    //--------------------------------------------------------------------------------------------------------
    //! \brief  Construct object from given parameters.
    //--------------------------------------------------------------------------------------------------------
    ReedsProblem( const ParameterList & );

    //--------------------------------------------------------------------------------------------------------
    //! \brief  Destructor for ReedsProblem class.
    //--------------------------------------------------------------------------------------------------------
    ~ReedsProblem( void ) override;


    //========================================================================================================
    //=== OPERATOR OVERLOADS =================================================================================
    //========================================================================================================

    //--------------------------------------------------------------------------------------------------------
    //! \brief  Delete copy assignment operator.
    //--------------------------------------------------------------------------------------------------------
    ReedsProblem & operator=( const ReedsProblem & ) = delete;


    //========================================================================================================
    //=== PUBLIC INTERFACE ROUTINES ==========================================================================
    //========================================================================================================

    //--------------------------------------------------------------------------------------------------------
    //! \brief  Returns the string descriptor of the class type.
    //--------------------------------------------------------------------------------------------------------
    static const std::string Descriptor( void );

    //--------------------------------------------------------------------------------------------------------
    //! \brief  Returns the string descriptor for an object's type.
    //--------------------------------------------------------------------------------------------------------
    const std::string GetDescriptor( void ) const override;

    //--------------------------------------------------------------------------------------------------------
    //! \brief  Prints a summary of the problem configuration to the logging interface.
    //--------------------------------------------------------------------------------------------------------
    void Print( const std::string & = "  " ) const override;

    //--------------------------------------------------------------------------------------------------------
    //! \brief  Overrides values in given ParameterList with requirements imposed by test problem.
    //--------------------------------------------------------------------------------------------------------
    void OverrideOptions( ParameterList & ) const override;


protected:

    //========================================================================================================
    //=== PROTECTED MEMBER VARIABLES =========================================================================
    //========================================================================================================

    double alpha;   //!< Scaling parameter \f$ \alpha \f$.


    //========================================================================================================
    //=== PROTECTED INTERFACE ROUTINES =======================================================================
    //========================================================================================================

    //--------------------------------------------------------------------------------------------------------
    //! \brief  Returns the value of the source term without mollification at the specified position.
    //--------------------------------------------------------------------------------------------------------
    virtual double Source( const double x ) const;

    //--------------------------------------------------------------------------------------------------------
    //! \brief  Returns the value of the total cross section without mollification at the specified position.
    //--------------------------------------------------------------------------------------------------------
    virtual double TotalCross( const double x ) const;

    //--------------------------------------------------------------------------------------------------------
    //! \brief  Returns the value of the scattering cross section without mollification at the specified
    //!         position.
    //--------------------------------------------------------------------------------------------------------
    virtual double ScatterCross( const double x ) const;

    //--------------------------------------------------------------------------------------------------------
    //! \brief  Returns the feature size of the source term.
    //--------------------------------------------------------------------------------------------------------
    virtual double SourceFtSize( void ) const {  return 1.0;  }

    //--------------------------------------------------------------------------------------------------------
    //! \brief  Returns the feature size of the total cross section.
    //--------------------------------------------------------------------------------------------------------
    virtual double TotalCrossFtSize( void ) const {  return 1.0;  }

    //--------------------------------------------------------------------------------------------------------
    //! \brief  Returns the feature size of the scattering cross section.
    //--------------------------------------------------------------------------------------------------------
    virtual double ScatterCrossFtSize( void ) const {  return 1.0;  }

};


# endif // if SPACE_DIMS == 1

# endif // ifndef __REEDS_PROBLEM_HPP__
